-- Activating the database on which work is going to be done--

use world_layoffs;

select * 
from layoffs;          

-- Creating a copy of a table 'layoffs'

create table layoffs_staging
like layoffs;


select * from layoffs_staging;

-- inserting data into 'layoffs_staging' table from 'layoffs' table.

insert layoffs_staging
select * 
from layoffs;

select * from layoffs_staging;

#################################################
			-- Data cleaning --
-- 1. Remove duplicates
-- 2. Standerdize the Data
-- 3. Null values or Blank values
-- 4. Remove any columns unneccessary
#################################################


## 1. Removing Duplicates ##

-- checking for the duplicates rows using row_number and over functions as we do not have any unique key in the data

WITH duplicate_cte AS(
select * ,
row_number() over(
partition by company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging 
)
select * from duplicate_cte
where row_num>1;


select * 
from layoffs_staging
where company = 'casper';

# Delete key can not updat CTE that's why we need to add a column named 'row_num' in a new table.

-- adding 'row_num' column in the table named 'layoffs_staging2' table.

CREATE TABLE `layoffs_staging2` (
  `company` text,
  `location` text,
  `industry` text,
  `total_laid_off` int DEFAULT NULL,
  `percentage_laid_off` text,
  `date` text,
  `stage` text,
  `country` text,
  `funds_raised_millions` int DEFAULT NULL,
  `row_num` int
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;


select * 
from layoffs_staging2;

-- inserting the data of 'layoffs_staging' table and 'row_num' column data by 

INSERT INTO layoffs_staging2
select * ,
row_number() over(
partition by company,location, industry, total_laid_off, percentage_laid_off, `date`, stage, country, funds_raised_millions) as row_num
from layoffs_staging;


select * 
from layoffs_staging2;

select * 
from layoffs_staging2
where row_num>1;


-- deleting duplicates row 

DELETE 
from layoffs_staging2
where row_num>1;

-- Checking whether the data is deleted or not.

select *
from layoffs_staging2
where row_num>1;

---------------------------------------------------------------------------

## 2. Standardizing data ## 
-- (finding issues in the data and then fixing it)

-- looking at column 'company'
-- Removing a space at the beginning in column 'Company'

UPDATE layoffs_staging2
SET company = trim(company);

select * 
from layoffs_staging2;


-- looking at column 'industry'

select distinct industry
from layoffs_staging2
order by 1;

-- updating 'Crypto Currency' and 'CryptoCurrency' with 'Crypto' in column 'industry'

UPDATE layoffs_staging2
SET industry = 'Crypto'
WHERE industry LIKE 'Crypto%';

-- Checking whether the data is updated or not.

select distinct industry
from layoffs_staging2
order by 1;

-- looking at column 'country'

SELECT DISTINCT country
FROM layoffs_staging2
ORDER BY 1;

-- updating 'United States.' with 'United States'

UPDATE layoffs_staging2
SET country = TRIM(TRAILING '.' FROM country)
WHERE country LIKE 'United States%';

-- Checking whether the data is updated or not.

SELECT DISTINCT country
FROM layoffs_staging2
ORDER BY 1;

-- looking at column 'date'

SELECT `date`,
STR_TO_DATE(`date`, '%m/%d/%Y')
from layoffs_staging2;

-- updating 'date' column and changing its format from text to date.

UPDATE layoffs_staging2
SET `date` = STR_TO_DATE(`date`, '%m/%d/%Y');

ALTER TABLE layoffs_staging2
MODIFY COLUMN `date` DATE;

---------------------------------------------------------------------------

## 3. Handling Null values or Blank values ##


SELECT *
FROM layoffs_staging2
WHERE industry IS NULL
OR industry= ''; 

-- replacing blank values with 'NULL' 

UPDATE layoffs_staging2
SET industry = NULL
WHERE industry= ''; 

-- Try to figure out if any row contains the industry name for the same company in the other rows so that we could replace with that.


SELECT *
FROM layoffs_staging2
WHERE company ='Airbnb';

-- above query output: there are other rows which contain the industry name for the same company that is 'Travel.'

SELECT *
FROM layoffs_staging2
WHERE company ='carvana';

-- above query output: there are other rows which contain the industry name for the same company that is 'Transportation.'

SELECT *
FROM layoffs_staging2
WHERE company ='juul';

-- above query output: there are other rows which contain the industry name for the same company that is 'Consumer.'

SELECT *
FROM layoffs_staging2
WHERE company LIKE 'Bally%';

-- above query output: No other row contains the industry name for the same company


-- here we are doing self join so that we could get to know from the table where the industry is name is given for the same company and
-- where the industry name is NULL so that we could replace them with the available values.

SELECT t1.industry,t2.industry
FROM layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
WHERE t1.industry IS NULL
AND t2.industry IS NOT NULL;

-- Replacing the industry column's NULL values with the available values we got from the last query. 

UPDATE layoffs_staging2 t1
JOIN layoffs_staging2 t2
ON t1.company = t2.company
SET t1.industry = t2.industry
WHERE t1.industry IS NULL 
AND t2.industry IS NOT NULL;


-- Checking whether the data is updated or not.

SELECT *
FROM layoffs_staging2
WHERE industry IS NULL
OR industry= ''; 

-- Note: All the values are updated except ‘Bally’s Interactive’ company as no other row contains the industry name 
-- for the ‘Bally’s Interactive’ company.


-- looking for the rows where 'total_laid_off' and 'percentage_laid_off' column values are NULL

SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- deleting all the rows which contains NULL value in 'total_laid_off' and 'percentage_laid_off' column.

DELETE
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

-- Checking whether the data is deleted or not.

SELECT *
FROM layoffs_staging2
WHERE total_laid_off IS NULL
AND percentage_laid_off IS NULL;

---------------------------------------------------------------------------

## 4. Remove any columns unneccessary ##

ALTER TABLE layoffs_staging2
DROP COLUMN row_num;




-- ------------ Final_cleaned_data ---------------- --

SELECT *
FROM layoffs_staging2;